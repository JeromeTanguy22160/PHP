# CRUD en MVC

Les contenus du cours [BRE03 Web Dev Course](https://kornog-dev.github.io/BRE03/) ¬© 2024 par [Mari Doucet](https://github.com/kornog-dev) sont sous licence [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/?ref=chooser-v1)

## √âtape 1 : Mise en place du Routeur

Vous allez utiliser ce que vous avez appris dans l'exercice pr√©c√©dent pour mettre en place un routeur. Voici la liste des routes et des m√©thodes correspondantes :

- `index.php?route=show_user` -> la m√©thode `show()` du `UserController`
- `index.php?route=create_user` -> la m√©thode `create()` du `UserController`
- `index.php?route=check_create_user` -> la m√©thode `checkCreate()` du `UserController`
- `index.php?route=update_user` -> la m√©thode `update()` du `UserController`
- `index.php?route=check_update_user` -> la m√©thode `checkUpdate()` du `UserController`
- `index.php?route=delete_user` -> la m√©thode `delete()` du `UserController`
- Dans tous les autres cas : la m√©thode `list()` du `UserController`

Pour le moment, vous n'avez pas de controller, du coup dans les accolades de vos conditions, notez simplement en commentaire le nom de controller et de la m√©thode qui devra √™tre appel√©e.

En observant la liste des templates que vous avez d√ª cr√©er √† l'√©tape 0 et en la comparant avec la liste des m√©thodes du `UserController` mentionn√©es ci-dessus, d√©duisez quelle m√©thode devra afficher quel template.

Pr√©remplissez vos templates avec le strict minimum, la structure de base d'une page pour le layout avec le require du template contenu dans la variable `$route` et un titre d√©crivant le nom de la page pour les autres. Inspirez-vous des consignes de l'exercice sur le Routeur.

>üí° N'oubliez pas de require le fichier `config/Router.php` dans votre fichier `config/autoload.php`

Il y a plus de m√©thodes que de templates, que pouvez-vous en d√©duire ? R√©pondez-moi dans un message sur Discord.

## √âtape 2

Gr√¢ce aux d√©ductions de l'√©tape pr√©c√©dente, vous allez pouvoir mettre en place le squelette de votre `UserController`, cr√©ez donc la classe et ses m√©thodes. Pour les m√©thodes dont vous avez d√©duit ce qu'elles doivent afficher, pr√©parez la variable `$route` et faites un `require` du layout.

Une fois que c'est fait, v√©rifiez que vos routes affichent bien le bon template. Comment pourriez-vous vous simplifier ces tests ?

>üí° N'oubliez pas de require le fichier `controllers/UserController.php` dans votre fichier `config/autoload.php`


## √âtape 3

Dans cette √©tape, je vais vous demander d'utiliser le logiciel de votre choix (canva, Google Draw, MS Paint ...) pour cr√©er un sch√©ma de ce qui se passe lorsque vous appelez l'URL `index.php?route=create_user`. Vous pouvez vous inspirer du sch√©ma de fonctionnement du MVC pr√©sent dans le cours.


## √âtape 4

Nous avons maintenant un squelette de Controller et un sch√©ma du fonctionnement de la route `create_user`, nous allons donc tenter d'aller plus loin dans la mise en place de cette route.

Nous allons commencer par cr√©er le mod√®le qui permet de repr√©senter la table `users` de notre base de donn√©es. 

Dans le fichier `models/User.php` cr√©ez une classe `User` qui correspond √† la table `users` de votre base de donn√©es.

>üí° N'oubliez pas de require le fichier `models/User.php` dans votre fichier `config/autoload.php`

## √âtape 5

Dans cette √©tape, nous allons g√©rer la connexion √† votre base de donn√©es.

Dans le fichier `managers/AbstractManager.php`, vous allez cr√©er une classe abstraite `AbstractManager`, elle n'a qu'un seul attribut `protected`, appel√© `$db`, qui est une instance de la classe `PDO` (fournie par PHP, rien √† require).

Le constructeur de la classe ne prend pas de param√®tres, par contre, il initialise son attribut `$db` avec les informations de connexion √† votre base de donn√©es.

>üí° N'oubliez pas de require le fichier `managers/AbstractManager.php` dans votre fichier `config/autoload.php`

## √âtape 6

Dans cette √©tape, nous allons g√©rer les interactions avec votre base de donn√©es. Vous pouvez vous inspirer des diff√©rents exercices r√©alis√©s pendant le module POO (userbase en POO, blog en POO) et de ce que vous aviez appris avec Hugues sur les requ√™tes avec PDO (https://discord.com/channels/1092386966760329229/1290243753428123683/1326470557121904641).

Dans le fichier `managers/UserManager.php`, cr√©ez une classe `UserManager` qui h√©rite de la classe `AbstractManager`.

Elle n'a pas d'attributs et son constructeur ne fait rien √† part appeler le constructeur de sa classe parente.

Elle contient par contre les m√©thodes publiques n√©cessaires pour un Manager (https://kornog-dev.github.io/BRE03/php/mvc/#les-managers).

Impl√©mentez ces m√©thodes en adaptant la situation √† la classe `User` et √† la table `users` de votre base de donn√©es.

>üí° N'oubliez pas de require le fichier `managers/UserManager.php` dans votre fichier `config/autoload.php`

## √âtape 7

Maintenant que vous avez mis en place les m√©thodes de votre `UserManager`, je vais vous demander de deviner quelle m√©thode du `UserManager` sera appel√©e dans quelle m√©thode du `UserController`.

Notez sur un fichier les correspondances entre les m√©thodes de Manager et de Controller et envoyez-les-moi sur Discord pour obtenir la suite des consignes.

## √âtape 8

Maintenant que vous savez qui va appeler qui, nous allons revenir √† notre route `create_user` que nous avions un peu laiss√©e de c√¥t√© √† l'√©tape 4 pour aller impl√©menter des choses dont nous aurions besoin.

La route `create_user` qui correspond donc √† la m√©thode `create()` du `UserController` est une route assez simple √† g√©rer, en effet, elle ne g√©n√®re pas de logique et se contente d'afficher un template.

Commen√ßons par remplir le template qu'elle appelle : `templates/users/create.phtml`. Ce template va devoir contenir le formulaire qui permet de saisir les informations d'un nouvel utilisateur. Cr√©ez ce formulaire HTML dans le template.

Comme tous les formulaires en PHP, il a besoin d'une `action` et d'une `method`, la m√©thode, √ßa ne change pas : c'est `post`. Mais √† votre avis, laquelle de nos routes sera son `action` ? Mettez-la en place.


## √âtape 9

Maintenant que vous savez que votre formulaire de cr√©ation d'utilisateur va appeler la route `check_create_user` nous allons nous occuper d'elle.

Elle a principalement 3 chose √† faire : 

1. R√©cup√©rer les donn√©es du formulaire pour hydrater une instance de la classe `User`
2. Instancier un `UserManager`et transmettre l'instance fraichement cr√©√©e √† sa m√©thode `create()`
3. Rediriger vers la page de liste des utilisateurs

Impl√©mentez ces trois comportements puis tester le fonctionnement de votre cr√©ation d'utilisateur (en v√©rifiant s'il apparait dans votre base de donn√©es).
