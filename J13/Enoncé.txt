# CRUD en MVC

Les contenus du cours [BRE03 Web Dev Course](https://kornog-dev.github.io/BRE03/) Â© 2024 par [Mari Doucet](https://github.com/kornog-dev) sont sous licence [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/?ref=chooser-v1)

## Ã‰tape 1 : Mise en place du Routeur

Vous allez utiliser ce que vous avez appris dans l'exercice prÃ©cÃ©dent pour mettre en place un routeur. Voici la liste des routes et des mÃ©thodes correspondantes :

- `index.php?route=show_user` -> la mÃ©thode `show()` du `UserController`
- `index.php?route=create_user` -> la mÃ©thode `create()` du `UserController`
- `index.php?route=check_create_user` -> la mÃ©thode `checkCreate()` du `UserController`
- `index.php?route=update_user` -> la mÃ©thode `update()` du `UserController`
- `index.php?route=check_update_user` -> la mÃ©thode `checkUpdate()` du `UserController`
- `index.php?route=delete_user` -> la mÃ©thode `delete()` du `UserController`
- Dans tous les autres cas : la mÃ©thode `list()` du `UserController`

Pour le moment, vous n'avez pas de controller, du coup dans les accolades de vos conditions, notez simplement en commentaire le nom de controller et de la mÃ©thode qui devra Ãªtre appelÃ©e.

En observant la liste des templates que vous avez dÃ» crÃ©er Ã  l'Ã©tape 0 et en la comparant avec la liste des mÃ©thodes du `UserController` mentionnÃ©es ci-dessus, dÃ©duisez quelle mÃ©thode devra afficher quel template.

PrÃ©remplissez vos templates avec le strict minimum, la structure de base d'une page pour le layout avec le require du template contenu dans la variable `$route` et un titre dÃ©crivant le nom de la page pour les autres. Inspirez-vous des consignes de l'exercice sur le Routeur.

>ğŸ’¡ N'oubliez pas de require le fichier `config/Router.php` dans votre fichier `config/autoload.php`

Il y a plus de mÃ©thodes que de templates, que pouvez-vous en dÃ©duire ? RÃ©pondez-moi dans un message sur Discord.

## Ã‰tape 2

GrÃ¢ce aux dÃ©ductions de l'Ã©tape prÃ©cÃ©dente, vous allez pouvoir mettre en place le squelette de votre `UserController`, crÃ©ez donc la classe et ses mÃ©thodes. Pour les mÃ©thodes dont vous avez dÃ©duit ce qu'elles doivent afficher, prÃ©parez la variable `$route` et faites un `require` du layout.

Une fois que c'est fait, vÃ©rifiez que vos routes affichent bien le bon template. Comment pourriez-vous vous simplifier ces tests ?

>ğŸ’¡ N'oubliez pas de require le fichier `controllers/UserController.php` dans votre fichier `config/autoload.php`


## Ã‰tape 3

Dans cette Ã©tape, je vais vous demander d'utiliser le logiciel de votre choix (canva, Google Draw, MS Paint ...) pour crÃ©er un schÃ©ma de ce qui se passe lorsque vous appelez l'URL `index.php?route=create_user`. Vous pouvez vous inspirer du schÃ©ma de fonctionnement du MVC prÃ©sent dans le cours.


## Ã‰tape 4

Nous avons maintenant un squelette de Controller et un schÃ©ma du fonctionnement de la route `create_user`, nous allons donc tenter d'aller plus loin dans la mise en place de cette route.

Nous allons commencer par crÃ©er le modÃ¨le qui permet de reprÃ©senter la table `users` de notre base de donnÃ©es. 

Dans le fichier `models/User.php` crÃ©ez une classe `User` qui correspond Ã  la table `users` de votre base de donnÃ©es.

>ğŸ’¡ N'oubliez pas de require le fichier `models/User.php` dans votre fichier `config/autoload.php`

## Ã‰tape 5

Dans cette Ã©tape, nous allons gÃ©rer la connexion Ã  votre base de donnÃ©es.

Dans le fichier `managers/AbstractManager.php`, vous allez crÃ©er une classe abstraite `AbstractManager`, elle n'a qu'un seul attribut `protected`, appelÃ© `$db`, qui est une instance de la classe `PDO` (fournie par PHP, rien Ã  require).

Le constructeur de la classe ne prend pas de paramÃ¨tres, par contre, il initialise son attribut `$db` avec les informations de connexion Ã  votre base de donnÃ©es.

>ğŸ’¡ N'oubliez pas de require le fichier `managers/AbstractManager.php` dans votre fichier `config/autoload.php`
